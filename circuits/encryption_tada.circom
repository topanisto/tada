pragma circom 2.1.6;

include "./lib/tc_opening_committer.circom";
include "../../node_modules/circomlib/circuits/gates.circom";

template PkEncryption() {
    signal input m;
    signal input ct;
    signal input sk;
    signal output out;
}

template EncryptionTada(k, N) {
    """
    Encryption-TADA circuit generated by the committer and encryptor.
    Proof that the ciphertext preimage and commited value are equal.
    """
    // shared message
    signal input m;

    // encryption circuit
    signal input ct;
    signal input sk;
    
    component enc = PkEncryption();
    enc.m <== m;
    enc.ct <== ct;
    enc.sk <== sk;

    // commitment opening circuit
    signal input g;
    signal input S[256];
    signal input W[k+1];
    signal input v_exp_gen; // 2^(2^k-256)

    component tc_opening = CommitterTCOpening(k, N);
    tc_opening.g <== g;
    tc_opening.m <== m;
    for (var i = 0; i < 256; i++) {
        tc_opening.S[i] <== S[i];
    }
    for (var i = 0; i < k+1; i++) {
        tc_opening.W[i] <== W[i];
    }

    signal output out;

    // check both statements are true
    component eq_statements = AND();
    eq_statements.a <== enc.out;
    eq_statements.b <== tc_opening.out;

    out <== eq_statements.out;
    // 
}